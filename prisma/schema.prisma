// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // <-- corrigé pour correspondre à ton .env
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.VarChar(255)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  createdAt     DateTime  @default(now())

  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]

  wallets       Wallet[]

  @@index([email])
}

model Account {
  id                        String  @id @default(cuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String? @db.Text
  access_token              String? @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String? @db.Text
  session_state             String?
  refresh_token_expires_in  Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  asset     String   @db.VarChar(64)
  amount    Decimal  @db.Decimal(38, 18)
  price     Decimal  @db.Decimal(38, 18)
  side      String   @db.VarChar(10)
  ts        DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, ts])
}

enum WalletType {
  EVM
  SOLANA
}

model Wallet {
  id        String     @id @default(cuid())
  type      WalletType
  address   String     @unique
  chainId   Int?
  createdAt DateTime   @default(now())

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}
