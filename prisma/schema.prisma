// prisma/schema.prisma

// ---------- Datasource ----------
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")         // en dev tu peux mettre l'endpoint DIRECT pour migrer
  directUrl = env("DIRECT_DATABASE_URL") // décommente si tu veux séparer migrations/app
}

// ---------- Generator ----------
generator client {
  provider = "prisma-client-js"
}

// ---------- NextAuth core models ----------
model User {
  id            String    @id @default(cuid())   // <- ID Prisma (clé primaire)
  name          String?   @db.VarChar(255)
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]

  @@index([email])
}

model Account {
  id                        String  @id @default(cuid())
  userId                    String

  type                      String
  provider                  String
  providerAccountId         String

  refresh_token             String? @db.Text
  access_token              String? @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String? @db.Text
  session_state             String?
  refresh_token_expires_in  Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------- Domaine ----------
model Transaction {
  id        String   @id @default(cuid())
  userId    String   // = User.id (ID Prisma)
  asset     String   @db.VarChar(64)
  amount    Decimal  @db.Decimal(38, 18)
  price     Decimal  @db.Decimal(38, 18)
  side      String   @db.VarChar(10)      // "buy" | "sell" (ou crée un enum si tu préfères)
  ts        DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, ts])
}
